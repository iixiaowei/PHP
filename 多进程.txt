#多进程

#多进程应用场景
1、处理文件
当一个文件包含许多任务（每个任务一行），并且各任务之间不存在执行的先后顺序关系，可以将文件进行分割（分割后的文件数量与进程数一致），然后使用多进程进行处理。
例如，现在有10个邮箱账号存储在文件mailist.txt中，每次发送邮件需要耗时2s，则采用单进程依次发送完这些邮件需要耗时20。 
如果采用多进程，例如3个进程进行处理，首先需要将文件按行数拆分成3个小文件，其中两个文件是4条记录，一个文件是2条记录。每个进程处理一个小文件，则不同进程发送完邮件的耗时为8、8、6，总耗时取最大值为8s。
2、拆分文件
原始文件 maillist.txt

000000@163.com
111111@163.com
222222@163.com
333333@163.com
444444@163.com
555555@163.com
666666@163.com
777777@163.com
888888@163.com
999999@163.com

拆分操作
split -a 1 -l 4 maillist.txt task

拆分后的文件
taska
000000@163.com
111111@163.com
222222@163.com
333333@163.com

taskb
444444@163.com
555555@163.com
666666@163.com
777777@163.com

taskc
888888@163.com
999999@163.com

```php

$cmds = [
    ['/Users/zhezhao/www/work/text_mail.php','a'],
    ['/Users/zhezhao/www/work/text_mail.php','b'],
    ['/Users/zhezhao/www/work/text_mail.php','c']
];

foreach ($cmds as $cmd){
    $pid = pcntl_fork();
    if($pid == -1){
        exit('create process failed');
    }
    if($pid > 0){
        pcntl_wait($status,WNOHANG);
    }else{
        pcntl_exec('/usr/bin/php',$cmd);
    }
}

text_mail.php
require 'MailWork.php';
$name = $argv[1];
echo $name." start #".time().PHP_EOL;
$worker = new MailWork($name);
$res = $worker->text_mail($argc,$argv);
if($res === false){
    echo $worker->getLastError();
}else{
    echo $name." ".$res." works done # ".time().PHP_EOL;
}
```
3、处理消息队列
这是另外一种常见的常见，我们将耗时操作放入消息队列，通过脚本从消息队列中取出并执行记录。
如果通过单个进程依次读取并处理消息，容易使队列中积累大量数据，导致操作的延迟时间较长，这种场景可以通过多个进程来读取并处理消息。
redis中的pop操作具有原子性，不会存在多个读取到相同的队列消息的情况。

redis_task.php
```php
$redis = new Redis();
$redis->connect('192.168.1.10');
$task_key = 'task_list';
$task_list = [
    '000000@163.com',
    '111111@163.com',
    '222222@163.com',
    '333333@163.com',
    '444444@163.com',
    '555555@163.com',
    '666666@163.com',
    '777777@163.com',
    '888888@163.com',
    '999999@163.com',
];
foreach ($task_list as $task){
    $redis->lPush($task_key,$task);
}

$cmds = [
    ['/Users/zhezhao/www/work/redis_mail.php','a'],
    ['/Users/zhezhao/www/work/redis_mail.php','b'],
    ['/Users/zhezhao/www/work/redis_mail.php','c']
];

foreach ($cmds as $cmd){
    $pid = pcntl_fork();
    if($pid == -1){
        exit('create process failed');
    }
    if($pid > 0){
        pcntl_wait($status,WNOHANG);
    }else{
        pcntl_exec('/usr/bin/php',$cmd);
    }
}

redis_mail.php
require 'MailWork.php';
$name = $argv[1];
echo $name." start #".time().PHP_EOL;
$worker = new MailWork($name);
$redis = new Redis();
$redis->connect('192.168.1.10');
$task_key = 'task_list';
while($redis->lLen($task_key)>0){
    $mailto = $redis->rPop($task_key);
    $worker->redis_mail($mailto);
}
echo $name." work done # ".time().PHP_EOL;
```




-- php_sapi_name ( void ) : string  
返回 web 服务器和 PHP 之间的接口类型

返回描述 PHP 所使用的接口类型（the Server API, SAPI）的小写字符串。 例如，CLI 的 PHP 下这个字符串会是 "cli"，
Apache 下可能会有几个不同的值，取决于具体使用的 SAPI。 以下列出了可能的值。 

返回接口类型的小写字符串。
尽管不够全面，可能返回的值包括了 aolserver、apache、 apache2filter、apache2handler、 caudium、cgi （直到 PHP 5.3）, 
cgi-fcgi、cli、 cli-server、 continuity、embed、fpm-fcgi、 isapi、litespeed、 milter、nsapi、 phttpd、pi3web、roxen、
thttpd、tux 和 webjames。 

```php

<?php
$sapi_type = php_sapi_name();
if (substr($sapi_type, 0, 3) == 'cgi') {
    echo "You are using CGI PHP\n";
} else {
    echo "You are not using CGI PHP\n";
}
?>

```
https://www.php.net/manual/zh/function.php-sapi-name.php

--posix_getpid ( void ) : int
返回当前进程 id

-- posix_getlogin ( void ) : string
Returns the login name of the user owning the current process. 

-- pcntl_fork ( void ) : int
pcntl_fork()
在当前进程当前位置产生分支（子进程）。译注：fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，
不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。

函数创建一个子进程，这个子进程仅PID（进程号） 和PPID（父进程号）与其父进程不同。
fork怎样在您的系统工作的详细信息请查阅您的系统 的fork（2）手册。 
成功时，在父进程执行线程内返回产生的子进程的PID，在子进程执行线程内返回0。失败时，在 父进程上下文返回-1，不会创建子进程，并且会引发一个PHP错误。 
如果返回值为-1，则fork失败，并且没有子进程。 这可能是由于缺少内存，或者因为已经达到对用户进程数量的系统限制。
如果返回值是大于0的任何数字，当前脚本是调用pcntl_fork（）的父级，返回值是分叉的子进程的进程ID（PID）。 最后，如果返回值为0，则当前脚本是被分叉的子节点。

-- posix_getpid ( void ) : int
Return the process identifier of the current process. 返回当前进程的 id 
返回进程 id 号，是整型（integer）。 

--  pcntl_wait ( int &$status [, int $options = 0 ] ) : int
等待或返回fork的子进程状态
wait函数刮起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。 
如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将 被释放。
关于wait在您系统上工作的详细规范请查看您系统的wait（2）手册。
Note:
    这个函数等同于以-1作为参数pid 的值并且没有options参数来调用pcntl_waitpid() 函数。

-- pcntl_wifexited ( int $status ) : bool
检查状态代码是否代表一个正常的退出。
检查子进程状态代码是否代表正常退出。 
参数 status 是提供给成功调用 pcntl_waitpid() 时的状态参数。
当子进程状态代码代表正常退出时返回 TRUE ，其他情况返回 FALSE。 

--  getmypid ( void ) : int
获取当前 PHP 进程 ID。 
返回当前 PHP 进程 ID，或在错误时返回 FALSE。

--  eval ( string $code ) : mixed
把字符串作为PHP代码执行


1、Process Control should not be enabled within a webserver environment and unexpected results may happen if any Process Control functions are used within a webserver environment. 

2、优点:
    1. 使用多进程, 子进程结束以后, 内核会负责回收资源
    2. 使用多进程,子进程异常退出不会导致整个进程Thread退出. 父进程还有机会重建流程.
    3. 一个常驻主进程, 只负责任务分发, 逻辑更清楚.

3、使用PHP提供的POSIX和Pcntl系列函数, 来实现一个PHP命令解析器, 主进程负责接受用户输入, 然后fork子进程执行, 并负责回显子进程的结束状态.  

```php

#!/bin/env php
<?php
/** A example denoted muti-process application in php
 * @filename fork.php
 * @touch date Wed 10 Jun 2009 10:25:51 PM CST
 * @author Laruence<laruence@baidu.com>
 * @license http://www.zend.com/license/3_0.txt   PHP License 3.0
 * @version 1.0.0
*/
 
/** 确保这个函数只能运行在SHELL中 */
if (substr(php_sapi_name(), 0, 3) !== 'cli') {
    die("This Programe can only be run in CLI mode");
}
 
/**  关闭最大执行时间限制, 在CLI模式下, 这个语句其实不必要 */
set_time_limit(0);
 
$pid  = posix_getpid(); //取得主进程ID
$user = posix_getlogin(); //取得用户名
 
echo <<<eod
USAGE: [command | expression]
input php code to execute by fork a new process
input quit to exit
 
        Shell Executor version 1.0.0 by laruence
EOD;
 
while (true) {
 
        $prompt = "\n{$user}$ ";
        $input  = readline($prompt);
 
        readline_add_history($input);
        if ($input == 'quit') {
               break;
        }
        process_execute($input . ';');
}
 
exit(0);
 
function process_execute($input) {
        $pid = pcntl_fork(); //创建子进程
        if ($pid == 0) {//子进程
                $pid = posix_getpid();
                echo "* Process {$pid} was created, and Executed:\n\n";
                eval($input); //解析命令
                exit;
        } else {//主进程
                $pid = pcntl_wait($status, WUNTRACED); //取得子进程结束状态
                if (pcntl_wifexited($status)) {
                        echo "\n\n* Sub process: {$pid} exited with {$status}";
                }
        }
}
  
```


--------------------------------------------------------------------------------------------------------------------------------
PHP可以通过PHP的进程控制函数（PCNTL）实现多进程，要注意的是，PCNTL只在UNIX LIKE OS下有效，windows是不支持的，
另外如果你在编译时没有加入这个扩展则需要自行安装.
pcntl_fork
首先我们需要了解一个非常重要的函数,pcntl_fork().

pcntl_fork —— 在当前进程当前位置产生分支（子进程）.fork创建了一个子进程，父进程和子进程都从fork的位置开始向下继续执行，
不同的是父进程执行过程中，得到的fork返回值为子进程号（PID），而子进程得到的是0.通过fork创建的子进程可以看成是父进程的一个拷贝，
无论是数据空间还是指令指针都完全一致，但从fork之后开始这两个父子进程就再也没有任何继承关系，两者可以看成是两个独立的进程，
而fork返回值的差异可以作为父子进程的区分，也是多进程编程实现的关键.另外，如果fork失败，则会返回-1.

Talk is cheap show me the code:

#!/usr/bin/env php
<?php
date_default_timezone_set("asia/shanghai");

$pid = pcntl_fork();
if ($pid==-1) {
    die('fork失败');
} else if ($pid==0) {
    //子进程执行
    $sec = 10;
    echo date('H:i:s') .'| 我是子进程 (PID:' . posix_getpid() . ')' . ',我休眠' . $sec . '秒后结束' . PHP_EOL;
    
} else if ($pid>0) {
    //父进程执行
    $sec = 15;
    echo date('H:i:s') . '| 我是父进程 (PID:' . posix_getpid() . '),我创建了一个子进程 (PID:' . $pid . ')' . ',我休眠' . $sec . '秒后结束' . PHP_EOL;
}
sleep($sec);
echo date('H:i:s') . '| 进程(PID:'.posix_getpid().')结束' . PHP_EOL;
exit(0);

/**********************************输出*************************************
16:22:13| 我是父进程 (PID:28082),我创建了一个子进程 (PID:28083),我休眠15秒后结束
16:22:13| 我是子进程 (PID:28083),我休眠10秒后结束
16:22:23| 进程(PID:28083)结束
16:22:28| 进程(PID:28082)结束

僵尸进程

在Linux进程的状态中，僵尸进程（Zombie）是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，
仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有任何内存空间.当一个进程结束了，
而它的父进程没有等待它（wait/waitpid），那么它将会成为僵尸进程，僵尸进程不断累积会导致系统因为没有更多可用的进程号而无法创建新的进程.

在上面的例子中是否出现僵尸进程？答案是否，由于父进程休眠15秒后便退出了，子进程没有成为僵尸进程，因为当进程结束时系统会扫描所有进程，
看看哪些进程是刚才结束的这个进程的子进程，此时这类子进程将成为“孤儿进程”，这些孤儿进程会过继给1号进程（init进程），
init会负责处理这些孤儿进程的资源释放问题.由此可见，存在僵尸进程必定存在其父进程，而当父进程没有等待子进程时，杀死父进程也可以清理僵尸进程.

pcntl_waitpid
如果上面例子中的主进程是一个常驻的进程，永不退出，那么子进程就会成为僵尸进程，为了避免僵尸进程的产生，父进程需要对其子进程进行等待，
pcntl扩展中通过pcntl_waitpid方法实现.

原型：int pcntl_waitpid ( int $pid , int &$status [, int $options = 0 ] )

说明：挂起当前进程的执行直到参数pid指定的进程号的进程退出， 或接收到一个信号要求中断当前进程或调用一个信号处理函数.
pcntl_waitpid()将会存储状态信息到status 参数上，第三个参数可以设置函数是否为阻塞方式调用（设置WNOHANG时以非阻塞方式）.

阻塞方式：阻塞当前进程，直到当前进程的一个子进程退出时返回，返回值为子进程的pid，如果发生错误则返回-1;

非阻塞方式：有子进程退出时返回子进程的pid，如果没有子进程退出则立刻返回，返回值为0;

当创建多个子进程时，如果使用阻塞方式，那么子进程实际上是串行工作的，因为父进程会阻塞直到一个子进程退出才会继续往下执行去创建下一个新的子进程，
因而设置非阻塞方式更利于达到并发的效果.

Talk is cheap show me the code:

#!/usr/bin/env php
<?php
date_default_timezone_set("asia/shanghai");

for ($i=1; $i <= 10; $i++) { 
    $pid = pcntl_fork();

    switch ($pid) {
    case -1:
        echo 'fork failed!'.PHP_EOL;
        break;
    case 0:
        //子进程
        sleep(rand(10,60));
        exit(0);
        break;  
    default:
        //父进程
        echo date('H:i:s')."   开启子进程{$pid}" . PHP_EOL;
        $child_pids[]=$pid;
        break;
    }
}

while(count($child_pids)>0){
    
    foreach ($child_pids as $key => $pid) {
    $res = pcntl_waitpid($pid, $status, WNOHANG);   
    if($res==-1||$res>0){
        echo date('H:i:s')."   子进程{$pid}关闭..." . PHP_EOL;
        unset($child_pids[$key]);//剔除已关闭的子进程
    }   
    }
    
    if(count($child_pids)==0){
    break;
    }
    sleep(5);
}
echo date('H:i:s').'   主进程结束' . PHP_EOL;

/**********输出*************

17:33:47   开启子进程29022
17:33:47   开启子进程29023
17:33:47   开启子进程29024
17:33:47   开启子进程29025
17:33:47   开启子进程29026
17:33:47   开启子进程29027
17:33:47   开启子进程29028
17:33:47   开启子进程29029
17:33:47   开启子进程29030
17:33:47   开启子进程29031
17:34:02   子进程29026关闭...
17:34:07   子进程29022关闭...
17:34:07   子进程29025关闭...
17:34:07   子进程29030关闭...
17:34:12   子进程29029关闭...
17:34:12   子进程29031关闭...
17:34:27   子进程29024关闭...
17:34:42   子进程29027关闭...
17:34:42   子进程29028关闭...
17:34:47   子进程29023关闭...
17:34:47   主进程结束

*****************************/
提醒
摘自PHP手册：

Process Control should not be enabled within a webserver environment and unexpected results may happen if any Process Control functions are used within a webserver environment.

一句话：请勿在PHP WEB开发中试图通过PCNTL使用多进程！

转载请注明出处：
© http://hejunhao.me



#参考网址：
https://php.net/manual/zh/book.pcntl.php
http://www.laruence.com/2009/06/11/930.html
http://hejunhao.me/archives/470